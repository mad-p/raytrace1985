--- ray2.generated.c	2025-09-01 21:11:07
+++ ray2.c	2025-09-01 21:34:03
@@ -1,3 +1,5 @@
+#define EXTERN
+
 #include "trace.h"
 
 
@@ -85,18 +87,18 @@
 void mainloop() {
 int ax, bp_2, bp_4, bx, cond, es, si;
 real fac0, fac1;
-
+vector fac3, fac6;
                                             // MAINLOOP	PROC
                                             //
                                             // 	link	4
-    reserve.re.x.man = 0x8000; reserve.re.x.exp = 0; reserve.re.x.sign = 0;
+    reserve[0].re.x.man = 0x8000; reserve[0].re.x.exp = 0; reserve[0].re.x.sign = 0;
                                             // 	FPLOD	RESERVE.RE.X,8000h,0,0
-    reserve.re.y.man = 0x8000; reserve.re.y.exp = 0; reserve.re.y.sign = 0;
+    reserve[0].re.y.man = 0x8000; reserve[0].re.y.exp = 0; reserve[0].re.y.sign = 0;
                                             // 	FPLOD	RESERVE.RE.Y,8000h,0,0
-    reserve.re.z.man = 0x8000; reserve.re.z.exp = 0; reserve.re.z.sign = 0;
+    reserve[0].re.z.man = 0x8000; reserve[0].re.z.exp = 0; reserve[0].re.z.sign = 0;
                                             // 	FPLOD	RESERVE.RE.Z,8000h,0,0
-    reserve.rside = 1;                      // 	mov	RESERVE.RSIDE,1
-    reserve.rrct = 0;                       // 	mov	RESERVE.RRCT,0
+    reserve[0].rside = 1;                   // 	mov	RESERVE.RSIDE,1
+    reserve[0].rrct = 0;                    // 	mov	RESERVE.RRCT,0
     ax = ystart;                            // 	mov	ax,YSTART
     bp_4 = ax;                              // 	mov	word ptr -4[bp],ax
   main00:
@@ -109,9 +111,9 @@
     ax = bp_2;                              // MAIN10:	mov	ax,word ptr -2[bp]
     cond = (!((ax) < (xstop)));             // 	cmp	ax,XSTOP
     if (cond) {goto main19;}                // 	njnb	MAIN19
-    reserve.rnet = &(networks);             // 	mov	RESERVE.RNET,offset DGROUP:NETWORKS
-    reserve.rprim = 0;                      // 	mov	RESERVE.RPRIM,0
-    reserve.ro.x = viewpt.x; reserve.ro.y = viewpt.y; reserve.ro.z = viewpt.z;
+    reserve[0].rnet = &(networks[0]);       // 	mov	RESERVE.RNET,offset DGROUP:NETWORKS
+    reserve[0].rprim = 0;                   // 	mov	RESERVE.RPRIM,0
+    reserve[0].ro.x = viewpt.x; reserve[0].ro.y = viewpt.y; reserve[0].ro.z = viewpt.z;
                                             // 	MOVMEM	RESERVE.RO,VIEWPT.X,12
     ax -= xoffset;                          // 	sub	ax,XOFFSET
     itor(&fac0, ax);                        // 	FITOR	FAC0
@@ -119,7 +121,7 @@
     ax -= yoffset;                          // 	sub	ax,YOFFSET
     ax = - ax;                              // 	neg	ax
     itor(&fac1, ax);                        // 	FITOR	FAC1
-    movmem(fac3, eh, 24);                   // 	MOVMEM	FAC3,EH,24
+    fac3 = eh; fac6 = ev;                   // 	MOVMEM	FAC3,EH,24
     fmlt(&fac3.x, &fac0);                   // 	FPMLT	FAC3.X,FAC0
     fmlt(&fac3.y, &fac0);                   // 	FPMLT	FAC3.Y,FAC0
     fmlt(&fac3.z, &fac0);                   // 	FPMLT	FAC3.Z,FAC0
@@ -132,10 +134,10 @@
     fadd(&fac3.x, &toscr.x);                // 	FPADD	FAC3.X,TOSCR.X
     fadd(&fac3.y, &toscr.y);                // 	FPADD	FAC3.Y,TOSCR.Y
     fadd(&fac3.z, &toscr.z);                // 	FPADD	FAC3.Z,TOSCR.Z
-    reserve.rv.x = fac3.x; reserve.rv.y = fac3.y; reserve.rv.z = fac3.z;
+    reserve[0].rv.x = fac3.x; reserve[0].rv.y = fac3.y; reserve[0].rv.z = fac3.z;
                                             // 	MOVMEM	RESERVE.RV,FAC3,12
-    si = &(reserve.rv);                     // 	lea	si,RESERVE.RV
-    nrmlize();                              // 	call	NRMLIZE
+                                            // 	lea	si,RESERVE.RV
+    nrmlize(&reserve[0].rv);                // 	call	NRMLIZE
     trace();                                // 	call	TRACE
     bx = bp_2;                              // 	mov	bx,word ptr -2[bp]
     ax = sred;                              // 	mov	ax,SRED
@@ -143,19 +145,19 @@
     if (cond) {goto ma00red;}               // 	jb	MA00RED
     ax = 255;                               // 	mov	ax,255
   ma00red:
-    pred[bx] = al;                          // MA00RED:	mov	PRED[bx],al
+    pred[bx] = ax;                          // MA00RED:	mov	PRED[bx],al
     ax = sgrn;                              // 	mov	ax,SGRN
     cond = ((ax) < (255));                  // 	cmp	ax,255
     if (cond) {goto ma00grn;}               // 	jb	MA00GRN
     ax = 255;                               // 	mov	ax,255
   ma00grn:
-    pgrn[bx] = al;                          // MA00GRN:	mov	PGRN[bx],al
+    pgrn[bx] = ax;                          // MA00GRN:	mov	PGRN[bx],al
     ax = sblu;                              // 	mov	ax,SBLU
     cond = ((ax) < (255));                  // 	cmp	ax,255
     if (cond) {goto ma00blu;}               // 	jb	MA00BLU
     ax = 255;                               // 	mov	ax,255
   ma00blu:
-    pblu[bx] = al;                          // MA00BLU:	mov	PBLU[bx],al
+    pblu[bx] = ax;                          // MA00BLU:	mov	PBLU[bx],al
     cond = ((monitor) == (0));              // 	cmp	MONITOR,0
     if (cond) {goto main18;}                // 	jz	MAIN18
 // 	push	es				;|
@@ -195,7 +197,7 @@
     bp_2 += ax;                             // 	add	word ptr -2[bp],ax
     goto main10;                            // 	jmp	MAIN10
   main19:
-    es = dataseg;                           // MAIN19:	mov	es,DATASEG
+                                            // MAIN19:	mov	es,DATASEG
                                             // 	push	word ptr -4[bp]
     writesca();                             // 	call	WRITESCA
                                             // 	pop	ax
@@ -203,7 +205,7 @@
     bp_4 += ax;                             // 	add	word ptr -4[bp],ax
     goto main00;                            // 	jmp	MAIN00
   main99:
-    es = dataseg;                           // MAIN99:	mov	es,DATASEG
+                                            // MAIN99:	mov	es,DATASEG
                                             // 	unlk
     goto endp;                              // 	ret
                                             //
@@ -213,30 +215,6 @@
   endp:;
 }
 
-/*
- * DECIMAL
- */
-
-void decimal() {
-int ax, cond, cx, di, dl, dx;
-
-                                            // DECIMAL	PROC
-                                            //
-    cx = 10;                                // 	mov	cx,10
-  deci0:
-    dx = 0;                                 // DECI0:	xor	dx,dx
-                                            // 	div	cx
-    dl += '0';                              // 	add	dl,'0'
-    es:byte ptr [di] = dl;                  // 	mov	es:byte ptr [di],dl
-    di -= 1;                                // 	dec	di
-    di -= 1;                                // 	dec	di
-    cond = (!((ax) == 0));                  // 	or	ax,ax
-    if (cond) {goto deci0;}                 // 	jnz	DECI0
-    goto endp;                              // 	ret
-                                            //
-                                            // DECIMAL	ENDP
-  endp:;
-}
 
 
 
